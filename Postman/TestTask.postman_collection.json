{
	"info": {
		"_postman_id": "ec0b13a7-70aa-4665-abfd-b24143de309a",
		"name": "TestTask",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45143014",
		"_collection_link": "https://uladzislautsimankou.postman.co/workspace/Uladzislau-Tsimankou's-Workspac~65266acb-5c1b-414f-80d3-60446ddf9169/collection/45143014-ec0b13a7-70aa-4665-abfd-b24143de309a?action=share&source=collection_link&creator=45143014"
	},
	"item": [
		{
			"name": "Cteate pacient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gender\": \"male\",\n  \"birthDate\": \"2025-05-20T23:00:29.937Z\",\n  \"active\": true,\n  \"name\": [\n    {\n      \"use\": \"official\",\n      \"family\": \"Иванов\",\n      \"given\": [\n        \"Иван\", \"Иванович\"\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Patients",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update pacient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"gender\": \"male\",\n  \"birthDate\": \"2025-05-20T23:00:29.937Z\",\n  \"active\": true,\n  \"name\": [\n    {\n        \"use\": \"maiden\",\n        \"family\": \"Егоров\",\n        \"given\": [\n            \"Александр\", \"Максимович\"\n        ]\n    },\n    {\n        \"use\": \"official\",\n        \"family\": \"Зайцев\",\n        \"given\": [\n            \"Виктор\", \"Федорович\"\n        ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Patients/49892f76-7c01-448b-84cf-78bc61c12404",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"49892f76-7c01-448b-84cf-78bc61c12404"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Patch pacient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json-patch+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/name/0/family\",\n        \"value\": \"Афанасьев\"\n    },\n    {\n        \"op\": \"remove\",\n        \"path\": \"/name/1\"\n    },\n    {\n        \"op\": \"add\",\n        \"path\": \"/name/-\",\n        \"value\": {\n            \"use\": \"official\",\n            \"given\": [\"Алексей\", \"Игоревич\"],\n            \"family\": \"Иванов\"\n        }\n    },\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Patients/49892f76-7c01-448b-84cf-78bc61c12404",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"49892f76-7c01-448b-84cf-78bc61c12404"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get one by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Patients/49892f76-7c01-448b-84cf-78bc61c12404",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"49892f76-7c01-448b-84cf-78bc61c12404"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all patients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Patients",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Search by birthdate 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Patients/search?birthDate=gt2002&birthDate=lt2004-08",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"search"
					],
					"query": [
						{
							"key": "birthDate",
							"value": "gt2002"
						},
						{
							"key": "birthDate",
							"value": "lt2004-08"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Search by birthdate 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Patients/search?birthDate=ge1980,eq1978-10-12&birthDate=lt1990-01-05",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"search"
					],
					"query": [
						{
							"key": "birthDate",
							"value": "ge1980,eq1978-10-12"
						},
						{
							"key": "birthDate",
							"value": "lt1990-01-05"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Search by birthdate 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Patients/search?birthDate=ge1980-06-01&birthDate=ne1990",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"search"
					],
					"query": [
						{
							"key": "birthDate",
							"value": "ge1980-06-01"
						},
						{
							"key": "birthDate",
							"value": "ne1990"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Delete pacient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Patients/49892f76-7c01-448b-84cf-78bc61c12404",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Patients",
						"49892f76-7c01-448b-84cf-78bc61c12404"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	]
}